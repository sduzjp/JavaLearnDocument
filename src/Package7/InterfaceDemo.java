package Package7;

/**
 * @ author:周健平
 * @ date:2020/3/22 21:24
 * @ modifiedBy:
 */

/**
 * 接口就是多个类的公共规范
 * 接口是一种引用数据类型，最重要的内容就是其中的抽象方法
 * 定义一个接口的格式：
 * public interface 接口名称{
 * //接口内容
 * }
 * 备注：换成了关键字interface之后，编译生成的字节码文件仍然是：.java->.class
 * java7接口中包含的内容有
 * 1：常量
 * 2：抽象方法
 * java8额外包含：
 * 3：默认方法
 * 4：静态方法
 * java9还额外包含
 * 私有方法
 * <p>
 * 接口使用步骤：
 * 1：接口不能直接使用，必须有一个“实现类”来“实现”该接口
 * 格式：
 * public class 实现类名称 implements 接口名称{
 * //……
 * }
 * 2：接口的实现类必须覆盖重写（实现）接口中所有的抽象方法
 * 实现：去掉abstract关键字，加上方法体大括号
 * 3：创建实现类的对象，进行使用
 * 注意事项：
 * 如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类就必须是抽象类
 * <p>
 * 从java 8开始，接口中允许定义默认方法
 * 格式：
 * [public] default 返回值类型  方法名称(参数列表){
 * 方法体
 * }
 * 备注：接口当中的默认方法，可以解决接口升级的问题，也就是当接口中新增加了抽象方法时，实现类就必须覆盖重写该抽象方法。
 * 定义默认方法来解决了这一问题
 * <p>
 * 接口的默认方法可以通过接口实现类对象，直接调用
 * 接口的默认方法，也可以被接口实现类进行覆盖重写
 * <p>
 * 从java 8 开始，接口当中允许定义静态方法
 * 格式：
 * [public] static 返回值类型  方法名称(参数列表){
 * 方法体
 * }
 * 提示：将abstract或者default换成static即可，带上方法体
 * 注意事项：不能直接通过实现类的对象来调用接口当中的静态方法
 * 正确用法：通过接口名称，直接调用其中的静态方法
 * 格式
 * 接口名称.静态方法名(参数)
 * <p>
 * 解决两个默认方法之间重复代码的问题，抽取一个共有方法
 * 这个共有方法不应该让实现类使用，应该是私有化的
 * 解决方案：
 * 从java 9开始，接口当中允许定义私有方法
 * 1：普通私有方法，解决多个默认方法之间重复代码问题
 * 格式：
 * private 返回值类型  方法名称(参数列表){
 * 方法体
 * }
 * 2：静态私有方法，解决多个静态方法之间重复代码问题
 * 格式：
 * private static 返回值类型  方法名称(参数列表){
 * 方法体
 * }
 * private只要接口自己才能调用，不能被实现类或者其他调用
 * <p>
 * 接口当中也可以定义“成员变量”，但是必须使用public static final三个关键字修饰
 * 从效果上看，这个“成员变量”实际上就是接口的【常量】
 * 格式：
 * [public] [static] [final] 数据类型  常量名称 = 数值
 * 备注：一旦使用了final关键字进行修饰，则 不可改变
 * 注意事项：
 * 1：接口当中的常量，可以省略public static final，注意不写也是如此
 * 2：接口当中的常量，必须进行赋值
 * 3：接口当中的名称，使用完全大写的字母，用下划线进行分割
 * <p>
 * 使用接口的时候注意：
 * 1：接口是没有静态代码块或者构造方法的
 * 2：一个类的直接父类是唯一的，但是一个类可以同时实现多个接口
 * 格式：
 * public class MyInterfaceImpl implements MyInterfaceA,MyInterfaceB{
 * //覆盖重写所有的抽象方法
 * }
 * 3：如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可
 * 4：如果实现类没有覆盖重写所有接口当中的抽象方法，那么实现类必须是一个抽象类
 * 5：如果实现类实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写
 * 6：一个类如果直接父类当中的方法和接口当中的默认方法产生了冲突，优先使用父类当中的方法
 */
public class InterfaceDemo {
    public static void main( String[] args ) {
        //错误写法，不能直接new接口
        //        MyInterface myInterface=new MyInterface( );
        //创建实现类的对象使用
        MyInterfaceImpl impl = new MyInterfaceImpl( );
        impl.methodAbstract1( );
        impl.methodAbstract2( );
        impl.method( );
        System.out.println( "------------------------" );

        //不能用接口实现类的对象来调用静态方法
        //impl.method1();
        MyInterface.method1( );
    }
}
